/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Playlist = {
  _id: string;
  _type: "playlist";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  select?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "project";
  }>;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  views?: number;
  description?: string;
  image?: string;
  link?: string;
  repository?: string;
  category?: string;
  pitch?: string;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: string;
  name?: string;
  email?: string;
  username?: Slug;
  image?: string;
  bio?: string;
};

export type Markdown = string;

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Playlist | Project | Author | Markdown | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: sanity/lib/queries.ts
// Variable: PROJECTS_QUERY
// Query: *[_type == "project" && defined(slug.current) && !defined($search) || name match $search || category match $search || author->name match $search] | order(_createdAt desc) {  _id,   name,   slug,  _createdAt,  author -> {    _id, name, image, bio  },   views,  description,  category,  image,}
export type PROJECTS_QUERYResult = Array<{
  _id: string;
  name: null;
  slug: Slug | null;
  _createdAt: string;
  author: null;
  views: null;
  description: null;
  category: null;
  image: null;
} | {
  _id: string;
  name: string | null;
  slug: null;
  _createdAt: string;
  author: null;
  views: null;
  description: null;
  category: null;
  image: string | null;
} | {
  _id: string;
  name: null;
  slug: null;
  _createdAt: string;
  author: null;
  views: null;
  description: string | null;
  category: null;
  image: null;
} | {
  _id: string;
  name: string | null;
  slug: Slug | null;
  _createdAt: string;
  author: {
    _id: string;
    name: string | null;
    image: string | null;
    bio: string | null;
  } | null;
  views: number | null;
  description: string | null;
  category: string | null;
  image: string | null;
}>;
// Variable: MOST_VIEWED_PROJECTS_QUERY
// Query: *[_type == "project"] | order(views desc) [0...3] {  _id,  id,  name,  slug,  author-> {    name,    image  },  views,  description,  image,  category,  pitch}
export type MOST_VIEWED_PROJECTS_QUERYResult = Array<{
  _id: string;
  id: null;
  name: string | null;
  slug: Slug | null;
  author: {
    name: string | null;
    image: string | null;
  } | null;
  views: number | null;
  description: string | null;
  image: string | null;
  category: string | null;
  pitch: string | null;
}>;
// Variable: PROJECT_BY_SLUG_QUERY
// Query: *[_type == "project" && slug.current == $slug][0]{  _id,  id,   name,   slug,   _createdAt,  author -> {    id, name, username, image, bio  }, views,  description,  category,  image,  pitch,}
export type PROJECT_BY_SLUG_QUERYResult = {
  _id: string;
  id: null;
  name: string | null;
  slug: Slug | null;
  _createdAt: string;
  author: {
    id: string | null;
    name: string | null;
    username: Slug | null;
    image: string | null;
    bio: string | null;
  } | null;
  views: number | null;
  description: string | null;
  category: string | null;
  image: string | null;
  pitch: string | null;
} | null;
// Variable: PROJECT_VIEWS_QUERY
// Query: *[_type == "project" && id == $id][0]{      _id,        id, views    }
export type PROJECT_VIEWS_QUERYResult = {
  _id: string;
  id: null;
  views: number | null;
} | null;
// Variable: AUTHOR_BY_ID_QUERY
// Query: *[_type == "author" && id == $id][0]{    _id,    id,    name,    username,    email,    image,    bio}
export type AUTHOR_BY_ID_QUERYResult = {
  _id: string;
  id: string | null;
  name: string | null;
  username: Slug | null;
  email: string | null;
  image: string | null;
  bio: string | null;
} | null;
// Variable: PROJECTS_BY_AUTHOR_QUERY
// Query: *[_type == "project" && author._ref == $id] | order(_createdAt desc) {  _id,  id,   name,   slug,  _createdAt,  author -> {    id, name, image, bio  },   views,  description,  category,  image,}
export type PROJECTS_BY_AUTHOR_QUERYResult = Array<{
  _id: string;
  id: null;
  name: string | null;
  slug: Slug | null;
  _createdAt: string;
  author: {
    id: string | null;
    name: string | null;
    image: string | null;
    bio: string | null;
  } | null;
  views: number | null;
  description: string | null;
  category: string | null;
  image: string | null;
}>;
// Variable: PLAYLIST_BY_SLUG_QUERY
// Query: *[_type == "playlist" && slug.current == $slug][0]{  _id,  id,  name,  slug,  select[]->{    id,    _createdAt,    name,    slug,    author->{      id,      name,      slug,      image,      bio    },    views,    description,    category,    image,    pitch  }}
export type PLAYLIST_BY_SLUG_QUERYResult = {
  _id: string;
  id: null;
  name: null;
  slug: Slug | null;
  select: Array<{
    id: null;
    _createdAt: string;
    name: string | null;
    slug: Slug | null;
    author: {
      id: string | null;
      name: string | null;
      slug: null;
      image: string | null;
      bio: string | null;
    } | null;
    views: number | null;
    description: string | null;
    category: string | null;
    image: string | null;
    pitch: string | null;
  }> | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"project\" && defined(slug.current) && !defined($search) || name match $search || category match $search || author->name match $search] | order(_createdAt desc) {\n  _id, \n  name, \n  slug,\n  _createdAt,\n  author -> {\n    _id, name, image, bio\n\n  }, \n  views,\n  description,\n  category,\n  image,\n}": PROJECTS_QUERYResult;
    "*[_type == \"project\"] | order(views desc) [0...3] {\n  _id,\n  id,\n  name,\n  slug,\n  author-> {\n    name,\n    image\n  },\n  views,\n  description,\n  image,\n  category,\n  pitch\n}": MOST_VIEWED_PROJECTS_QUERYResult;
    "*[_type == \"project\" && slug.current == $slug][0]{\n  _id,\n  id, \n  name, \n  slug, \n  _createdAt,\n  author -> {\n    id, name, username, image, bio\n  }, \nviews,\n  description,\n  category,\n  image,\n  pitch,\n}": PROJECT_BY_SLUG_QUERYResult;
    "\n    *[_type == \"project\" && id == $id][0]{\n      _id,\n        id, views\n    }\n": PROJECT_VIEWS_QUERYResult;
    "\n*[_type == \"author\" && id == $id][0]{\n    _id,\n    id,\n    name,\n    username,\n    email,\n    image,\n    bio\n}\n": AUTHOR_BY_ID_QUERYResult;
    "*[_type == \"project\" && author._ref == $id] | order(_createdAt desc) {\n  _id,\n  id, \n  name, \n  slug,\n  _createdAt,\n  author -> {\n    id, name, image, bio\n  }, \n  views,\n  description,\n  category,\n  image,\n}": PROJECTS_BY_AUTHOR_QUERYResult;
    "*[_type == \"playlist\" && slug.current == $slug][0]{\n  _id,\n  id,\n  name,\n  slug,\n  select[]->{\n    id,\n    _createdAt,\n    name,\n    slug,\n    author->{\n      id,\n      name,\n      slug,\n      image,\n      bio\n    },\n    views,\n    description,\n    category,\n    image,\n    pitch\n  }\n}": PLAYLIST_BY_SLUG_QUERYResult;
  }
}
